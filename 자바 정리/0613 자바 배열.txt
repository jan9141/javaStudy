배열

- 클래스를 통해 만들어진 현실 사물체
- 현실 세계의 모든 것을 나타냄

Math.random() -> 실행 할 때 마다 난수 발생(값이 달라진다)
0 <= Math.random() < 1

0 <= Math.random()*45 < 45
0 <= ? <45
	(int)44.9999 -> 44

0 <= (int)(Math.random()*45) < 45
0 <=? < 45

lotto배열에서 1부터 45까지 저장

0.1234 ~ 44 배열 lotto의 번지
idx=번지
int box=0; //임시 저장공간
box=lotto[idx];
lotto[idx]=lotto[0];//
lotto[0]=box;


1.같은 타입의 data를 순서대로 그룹화
2.인덱스(번지,요소)는 0번지부터 시작된다
3.배열의 갯수는 고정한다. >> 컬렉션..고정X
4.배열 참조형 타입(배열의 전체 주소값으로 접근)..new 배열
5.배열의 생성과 동시 초기화 해야된다.
6.값을 초기화 하지 않으면 0으로 초기화 된다.
7.반복문(for)과 같이 많이 사용된다.
8.전체배열의 data의 갯수는 전체 인덱스 총수보다 1크다
9.배열 이름에 전체 배열의 주소값을 저장
10.foreach (DB의 data를 가져 올 때)

------------------------------------------------------------

Object obj=new Object();

obj. -> . (점) = 객체 접근 연산자 -> 객체가 가지고 있는 속성이나 메서드에 접근 할 수 있다.
obj.속성;
obj.매서드();

** 모든 클래스는 Object클래스를 상속 받는다.
** 모든 클래스는 Object클래스의 모든 속성과 매서드를 상속 받았다.
-> 사용 할 수 있다.
배열

****get -> 가져 온다
****set -> 설정한다

객체 타입의 반복문 foreach문

for(객체타입 변수:객체){
	//변수 -> 모든 객체 요소를 get
}
for문 차이는 for문 갯수를 정해야 된다.

** 다차원 배열 ** (행,열)

1. 전체 배열 접근 배열의 이름으로 접근
2. 각각의 배열의 행 배열 이름[]
3. 각각의 배열의 열은 배열 이름 [행][]

4행 3열
int[][] arrInt = new int[4][3];

arrInt[0] << 첫번째 행
arrInt[0][0] << 0행 0열 "행 먼저 찾고 >>"
