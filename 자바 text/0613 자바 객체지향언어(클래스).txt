1. 절차 지향 언어와 객체 지향 언어
절차 지향 언어: 작업순서(알고리즘)을 표현 (함수들의 집합으로 프로그래밍)
ex) c언어
객체 지향 언어: 미리 사용할 목적으로 설계도(클래스)를 완성하고 그 객체를 이용해서 프로그래밍
ex) java , c++


== 객체지향언어의 목적 ==

* 컴퓨터 산업 발전에 따라 소프트웨어의 생명주기(life cycle) 단축
* 상속, 다형성, 객체, 캡슐화 등 소프트웨어 재사용을 위한 여러 장치 내장
* 소프트웨어 재사용과 부분 수정 빠름
* 소프트웨어 생산성 향상

1) 객체 모델링
2) 클래스를 설계
3) 프로그래밍

세상 모든 것이 객체다

클래스: "객체를 생성하기 위한 설계도(틀)", "객체의 속성과 기능 선언"
객체(Object, 인스턴스(instance)): 실제, 추상 >> 모든 것.."클래스를 통해서 현실화된 사물"
객체 멤버: 속성(필드, 프로퍼티), 메서드(기능)


** 클래스 명명 규칙 **
1. 대문자로 시작 한다(약속)
2. 한글을 사용하지 말자(약속)
3. 특수기호는 _ $ 이외에는 사용 할 수 없다 X
4. 공백을 허용하지 않는다 X
5. 단어의 첫 글자는 대문자로 시작한다(권고)
= 클래스 구성 =
접근 제한자 class 클래스 {
	접근제한자 필드; // 프로퍼티 속성
	접근제한자 필드;
	접근제한자 메서드;
}
= 클래스 멤버 =
1. 필드 (멤버 변수, 프로퍼티)
인스턴스 멤버: 객체가 생성되면 생성되고 객체가 소멸되면 종료
클래스 멤버: 클래스가 생성되면 생성되고 클래스가 소멸되면 종료

인스턴스 멤버는 new라는 키워드를 통해 힙이라는 영역에 존재
클래스 멤버는 -공유 가능
=================================

1. 클래스(class) >> "사용자 정의 타입"

접근제한자(지정자) class 클래스명 {

}
접근제한자(지정자) (Modify)

필드)
접근제한자 타입 필드명;

메서드)
접근제한자 반환타입 매서드명(입력인자){
	return 반환값;
}

//클래스에 대한 접근 권한/클래스 선언/클래스 이름
// 접근제한자(지정한) class 클래스명(첫글자대문)
public class Circle {
	//필드+매서드 -> 멤버
	//필드(속)
	public int radius;
	public String name;

	//메소드
	public double getArea(){
		return 3.14*radiue*radius;
	}
}
1. 필드
인스턴스멤버: 객체가 생성되면 생성되고 객체가 소멸되면 종료
클래스멤버: 클래스가 생성되면 생성되고 클래스가 소멸되면 종료

클래스타입 객체참조 변수 =new 생성자();

//인서턴스 화 (객체화)
String str=new Strint("manso");
str.멤버;//


2. 멤버(메서드)

접근제한자 반환타입 메서드명(입력인자){
	return 반환값;//반환값이 없으면 생략
}
public void instanceMethod(String name) {// 인스턴스 메서드
	System.out.println(name + "인스턴스매서드2");
}



=========================================
**캡슐화 : 객체를 캡슐로 싸서 내부를 볼 수 없게 하는 것
객체의 가장 본질적인 특징
외부의 접근으로부터 객체 보호

** 자바의 캡슐화
클래스(class): 객체 모양을 선언한 틀(캡슐화하는 틀)
객체: 생성된 실제(instance)
클래스 내에 메소드와 필드 수현

== 접근 제한자(modify)==
public 모든 클래스에서 접근 가능(공용)
private 같은 클래스내에서만 접근 가능

== 메소드 오버로딩 ==
오버로딩 (Overloading)
한 클래스 내에서 두 개 이상의 이름이 같은 메소드 작성
.메소드 이름이 동일하여야 함
.매개 변수의 개수가 서로 다르거나, 타입이 서로 달라야함
.리턴 타입은 오버로딩과 관련 없음

자바에서 허용..
오버로딩 "메서드의 이름이 같고 매개변수 유형이 다른 매서드를 허용"

생성자 오버로딩..
