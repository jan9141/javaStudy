***클래스 명명 규칙

키워드(예약어)를 사용할 수 없다.
숫자로 시작하지 X
공백 허용 X
_$ 이외의 특수문자 X
대소문자 구분한다. -> Mysql,Oracle 대소문자X
소문자로 시작하자.
다른 문자가 시작되면 대문자로 시작하자.
한글은 사용 허지 말자

===================================
프로그래밍 언어 -> 컴퓨터와 대화 하는 언어

컴파일 언어 -> 번역(책) C,JAVA..
사람		컴파일		컴퓨터
source		컴파일러		기계어 0 1

source	컴파일	.class	실행
에러 -> java는 엄격하다.
컴파일 에러 -> 프로그램 실행전에 에러-> 프로그램이 실행이 안됨
런타임 에러 -> 프로그램인 실행 중에 에러
	-> Exception(예외): 무시할수 있는 에러(작은에러) -> 예외처리
===================================
***객체지향 클래스***
인스턴스 멤버는 new라는 ㅣ워드를 통해 힙이라는 영역에 존재
클래스 멤버는 공유가능

2. 메서드 (함수, 기능)
접근제한자 반환타입 매소드 (입력인자) {
	return 반환값;
}
반환타입
//void return가 없다. 생략가능
public void 매서드명(타입변수){
	return;
}
//String return 값이 없다. 생략가능
public String 매서드명(타입변수){
	retrun String;
}
//public int 매서드명(타입 변수){
	return int;
}

this -> 객체 자신
this.멤버;
this.필드;
this.메서드();
==================================
접근제한자(접근지정자)

*클래스*
i) public		외부 어디서나 접근가능(다른 패키지에서도 접근가능)
ii) private	 	해당 클래스에서만 접근가능
iii)protected	 해당 클래스 + 자식 클래스에서 접근가능★
iv) default	 자바 패키지 내에서 접근가능

*메소드 / 변수 (클래스 멤버)*
i) public		외부 어디서나 접근가능
ii)private		해당 클래스에서만 접근가능(캡슐화)
iii)protected	 해당 클래스 + 자식 클래스에서 접근가능★
iv) default	 자바 패키지 내에서 접근가능

*********캡슐화
>> 객체를 캡슐로 싸서 내부를 볼 수 없게하는것(외부의 접근으로부터 객체보호)

자바의 캡슐화
>> 클래스: 객체 모양을 선언한 툴(캡슐화하는 툴)
>> 객체 : 생성된 실체

---------------------------------------------------------------------
class 멤버
필드	인스턴스, 클래스
매서드	인스턴스, 클래스

***static 멤버(클래스멤버) -> DB Connect(DB연동클래스 등)
>>클래스당 하나만 생성
>>객체들에 의해 공유됨★★ 클래스이름.클래스멤버
>> 프로그램이 종료될때 사라짐

**instance 멤버 -> 객체를 생성한후(인스턴스화)에 사용 가능
>>객체별로 별도 존재
>> 객체 생성 시에 멤버 생성됨
>> 공유되지않음 ★★
>> 객체 사라지면 멤버도 사라짐

클래스의 멤버

필드-> 하나의값을 setting 하거나, get
매서드 -> 어떤 기능, 처리, 구현, 호흡
	** return문을 만나면 종료
	** 구현부가 있으면 구현부를 구현 하고 return 값을 반환하고 종료
	** call(호출) 할 때 마다 새로 생성 된다.

클래스
접근제한자 class 클래시명 {
	멤버;
}

필드
접근제한자 타입 필드명;

매서드
//선언부
접근제한자 반환타입 매서드(입력인자){
	// 구현부
	return 반환값;
}
// 매서드 유형1
//void return값이 없다 . 생략가능
public void 매서드명(){
 //구현부
 // return;
}

// 매서드 유형 2
// void return 값이 없다, 입력값이 있다.
public void method2(int num1,int num2) {
 // 입력 값이 있다.
 int sum=num1+num2;// 매서드 안에 선언된 변수(지역변수)
 // return;
}

// 매서드 유형3
// 반환 타입 -> 반환 타입이 있을시에 반드시 return값이 있어야된다.
// 입력값이 없다.
public int method3() {
	return 반환값(반환타입과 타입이 일치);
}
// 매서드 유형4
public int method(입력) {
	//구현부
	return 반환값(반환타입과 타입이 일치);
}

	<접근가능 여부>
static	>>>> static (O)
instance	>>>> static (O)
static	>>>> instance(X) -> static 매서드에서는 intance멤버X

static멤버(클래스멤버) -> 엄격하다

** 기본적으로 프로그래밍언에서 이름(매서드 변수)같은 경우 같은 기억 공간에서는 허용 되지 않는다
	다만, 예외적으로 자바에서는 메서드 오버로딩을 허용하고 **

== 메소드 오버로딩 == ** 매서드명, 타입, 매개변수 갯수가 완전히 일치 하면 허용 X

오버로딩(Overloading)
한 클래스 내에서 두 개 이상의 이름이 같은 메소드 작성
.메소드 이름이 동일 하여야함
.매개 변수의 개수가 서로 다르거나, 타입이 서로 달라야함
.리턴 타입은 오버로딩과 관련 없음
.구현부와 상관없다.

자바에서 허용..
오버로딩 "매서드의 이름이 같고 매개변수 유형이 다른 매서드를 허용"

생성자 오버로딩..
객체지향 ---------(정리 잘하자~~)
*** 클래스, 멤버,필드, static, instance, private , 매서드
*** 생성자(contruct), 상속, 추상클래스, 인터페이스
*** 패키지, 접근제한자(지정자),오버로딩(매서드 오버로딩), 오버라이딩, 다형성